else if (base::grepl("days ago", tsla_news[row, ]$Date)) {tsla_news[row, ]$Date <- Sys.Date() - base::as.numeric(base::substr(tsla_news[row, ]$Date, 1, 1))}
# If news has a date, format it as a date
else {tsla_news[row, ]$Date <- base::as.Date(paste0(tsla_news[row, ]$Date, " 2020"), "%b %d %Y")}
}
tsla_news$Date <- base::as.Date(base::as.numeric(tsla_news$Date), origin = "1970-01-01")
for (row in 1:base::nrow(goog_news)) {
# If news was hours ago, set date as today
if (base::grepl("hours ago", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date()}
#
else if (base::grepl("Yesterday", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date() - 1}
# If news was days ago, set date as today minus the number of days
else if (base::grepl("days ago", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date() - base::as.numeric(base::substr(goog_news[row, ]$Date, 1, 1))}
# If news has a date, format it as a date
else {goog_news[row, ]$Date <- base::as.Date(paste0(goog_news[row, ]$Date, " 2020"), "%b %d %Y")}
}
goog_news$Date <- base::as.Date(base::as.numeric(goog_news$Date), origin = "1970-01-01")
View(goog_news)
View(tsla_news)
## Load libraries
library(bit64)
library(caret)
library(corrplot)
library(e1071)
library(data.table)
library(dplyr)
library(ggplot2)
library(rvest)
library(stringr)
knitr::opts_chunk$set(echo = T)
## Define search strings on Google News
tsla_search <- read_html("https://news.google.com/search?q=TSLA%20when%3A10y&hl=en-US&gl=US&ceid=US%3Aen")
goog_search <- read_html("https://news.google.com/search?q=GOOG%20when%3A10y&hl=en-US&gl=US&ceid=US%3Aen")
## Extract headlines
tsla_headlines <- tsla_search %>%
rvest::html_nodes("article") %>% rvest::html_text("span") %>%
stringr::str_split("(?<=[a-z0-9!?\\.])(?=[A-Z])") # Clean strings
tsla_headlines <- base::sapply(tsla_headlines, function(x) x[1]) # Extract only the first elements
goog_headlines <- goog_search %>%
rvest::html_nodes("article") %>% rvest::html_text("span") %>%
stringr::str_split("(?<=[a-z0-9!?\\.])(?=[A-Z])") # Clean strings
goog_headlines <- base::sapply(goog_headlines, function(x) x[1]) # Extract only the first elements
## Extract the time since the headline
tsla_time <- tsla_search %>% rvest::html_nodes("div article div div time") %>% rvest::html_text()
goog_time <- goog_search %>% rvest::html_nodes("div article div div time") %>% rvest::html_text()
## Create data frame
tsla_news <- base::data.frame("Date" = tsla_time, "Headline" = tsla_headlines, stringsAsFactors = F)
goog_news <- base::data.frame("Date" = goog_time, "Headline" = goog_headlines, stringsAsFactors = F)
## Format date columns
for (row in 1:base::nrow(tsla_news)) {
# If news was hours ago, set date as today
if (base::grepl("hours ago", tsla_news[row, ]$Date)) {tsla_news[row, ]$Date <- Sys.Date()}
#
else if (base::grepl("Yesterday", tsla_news[row, ]$Date)) {tsla_news[row, ]$Date <- Sys.Date() - 1}
# If news was days ago, set date as today minus the number of days
else if (base::grepl("days ago", tsla_news[row, ]$Date)) {tsla_news[row, ]$Date <- Sys.Date() - base::as.numeric(base::substr(tsla_news[row, ]$Date, 1, 1))}
# If news has a date, format it as a date
else {tsla_news[row, ]$Date <- base::as.Date(paste0(tsla_news[row, ]$Date, " 2020"), "%b %d %Y")}
}
tsla_news$Date <- base::as.Date(base::as.numeric(tsla_news$Date), origin = "1970-01-01")
for (row in 1:base::nrow(goog_news)) {
# If news was hours ago, set date as today
if (base::grepl("hours ago", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date()}
#
else if (base::grepl("Yesterday", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date() - 1}
# If news was days ago, set date as today minus the number of days
else if (base::grepl("days ago", goog_news[row, ]$Date)) {goog_news[row, ]$Date <- Sys.Date() - base::as.numeric(base::substr(goog_news[row, ]$Date, 1, 1))}
# If news has a date, format it as a date
else {goog_news[row, ]$Date <- base::as.Date(paste0(goog_news[row, ]$Date, " 2020"), "%b %d %Y")}
}
goog_news$Date <- base::as.Date(base::as.numeric(goog_news$Date), origin = "1970-01-01")
## Load raw data into the global environment
tsla <- base::data.frame(data.table::fread("1 - Data/Tesla/tsla.csv", na.strings = c("#N/A N/A", "#N/A Invalid Field", "#N/A Requesting Data...")), stringsAsFactors = F)
goog <- base::data.frame(data.table::fread("1 - Data/Google/goog.csv", na.strings = c("#N/A N/A", "#N/A Invalid Field", "#N/A Requesting Data...")), stringsAsFactors = F)
## Clean raw data
tsla <- tsla %>% dplyr::select_if(~sum(!is.na(.)) > 0) %>% # Drop columns that contain only NAs
dplyr::filter(!is.na(PX_LAST)) # Drop rows where PX_LAST is NA
goog <- goog %>% dplyr::select_if(~sum(!is.na(.)) > 0) %>% # Drop columns that contain only NAs
dplyr::filter(!is.na(PX_LAST)) # Drop rows where PX_LAST is NA
## Format date columns
tsla$Date <- as.Date(tsla$Date, "%m/%d/%Y")
goog$Date <- as.Date(goog$Date, "%m/%d/%Y")
## Plot prices versus time
tsla_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data = tsla, ggplot2::aes(x = Date, y = PX_LAST)) + ggplot2::ggtitle("TSLA")
goog_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data = goog, ggplot2::aes(x = Date, y = PX_LAST)) + ggplot2::ggtitle("GOOG") +
ggplot2::scale_x_date(limits = c(base::min(tsla$Date), base::max(tsla$Date))) # Align the x-axis with TSLA
gridExtra::grid.arrange(tsla_plot, goog_plot)
View(tsla)
## Plot prices versus time
tsla_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data = tsla, ggplot2::aes(x = Date, y = PX_LAST)) + ggplot2::ggtitle("TSLA")
goog_plot <- ggplot2::ggplot() +
ggplot2::geom_line(data = goog, ggplot2::aes(x = Date, y = PX_LAST)) + ggplot2::ggtitle("GOOG") +
ggplot2::scale_x_date(limits = c(base::min(tsla$Date), base::max(tsla$Date))) # Align the x-axis with TSLA
gridExtra::grid.arrange(tsla_plot, goog_plot)
require(dplyr)
totalRowTsla = base::nrow(tsla)
totalColTsla = base::ncol(tsla)
naTsla       = tsla %>%
base::sapply(.,function(y) base::sum(base::length(base::which(base::is.na(y))))) %>%
base::as.data.frame() %>%
tibble::rownames_to_column(., "Features")
totalRowGoog = base::nrow(goog)
totalColGoog = base::ncol(goog)
naGoog       = goog %>%
base::sapply(.,function(y) base::sum(base::length(base::which(base::is.na(y))))) %>%
base::as.data.frame() %>%
tibble::rownames_to_column(., "Features")
knitr::kable(
naTsla,
col.names = c("Features","Number of Missing Values"),
caption   = "Table 2-1: The number of Missing Values - Tesla",
align     = "lccrr"
)
knitr::kable(
naGoog,
col.names = c("Features","Number of Missing Values"),
caption   = "Table 2-2: The number of Missing Values - Google",
align     = "lccrr"
)
#Select a subset of original data for data transformation and PCA
tslaSelected = tsla %>%
.[,(which(naTsla[,2] < 100))] %>%
.[!(apply(.,1, function(y){any(is.na(y))})),] %>%
.[,-1] #remove dates in the first column
#Apply Log-transformation on tslaSelected$TURNOVER to avoid producing NaN in skewness computation
tslaSelected$TURNOVER = log(tslaSelected$TURNOVER)
base::names(tslaSelected) [6]= "log(TURNOVER)"
require(e1071)
skewnessTsla = apply(tslaSelected,2,e1071::skewness)
kurtosisTsla   = apply(tslaSelected,2,e1071::kurtosis)
skewnessTsla = skewnessTsla %>%
as.data.frame() %>%
tibble::rownames_to_column(., "features")
knitr::kable(
skewnessTsla,
col.names = c("Features","Skewness"),
caption   = "Table 2-3: Skewness of Selected Features - Tesla",
align     = "lccrr"
)
kurtosisTsla = kurtosisTsla %>%
as.data.frame() %>%
tibble::rownames_to_column(., "features")
knitr::kable(
kurtosisTsla,
col.names = c("Features","Kurtosis"),
caption   = "Table 2-4: Kurtosis of Selected Features - Tesla",
align     = "lccrr"
)
#Transform the selected data
(tslaTrans = caret::preProcess(tslaSelected, method = c("BoxCox","center","scale","pca")))
#Apply the transformations("BoxCox","center","scale","pca")
tslaPCA = stats::predict(tslaTrans,tslaSelected) #Outputs are PCA components
utils::head(tslaPCA)
#Summary of PCA results
tslaTrans_     = caret::preProcess(tslaSelected, method = c("BoxCox","center","scale"))
propVarTslaPCA = tslaSelected %>%
stats::predict(tslaTrans_,.) %>%
stats::prcomp() %>%
summary()
propVarTslaPCA #proportion of variance explained by each PCs
transformedTsla = predict(tslaTrans_,tslaSelected)
par(mfrow=c(2,2))
for (i in 1:ncol(tslaSelected)) {
hist(tslaSelected[,i], breaks=20, freq=FALSE,
main = paste("Density Plot - ",names(tslaSelected)[i],                            "(Before)"),xlab = " ")
hist(transformedTsla[,i], breaks=20, freq=FALSE,
main = paste("Density Plot - ",names(transformedTsla)[i],
"(After)"),xlab = " ")
}
#Select a subset of original data for data transformation and PCA
googSelected = goog %>%
.[,(which(naGoog[,2] < 100))] %>%
.[!(apply(.,1, function(y){any(is.na(y))})),] %>%
.[,-1] #remove dates in the first column
#Apply Log-transformation on googSelected$TURNOVER
googSelected$TURNOVER = base::log(googSelected$TURNOVER)
base::names(googSelected) [6]= "log(TURNOVER)"
#require(e1071)
skewnessGoog = apply(googSelected,2,e1071::skewness)
kurtosisGoog = apply(googSelected,2,e1071::kurtosis)
#Select a subset of original data for data transformation and PCA
googSelected = goog %>%
.[,(which(naGoog[,2] < 100))] %>%
.[!(apply(.,1, function(y){any(is.na(y))})),] %>%
.[,-1] #remove dates in the first column
#Apply Log-transformation on googSelected$TURNOVER
googSelected$TURNOVER = base::log(googSelected$TURNOVER)
base::names(googSelected) [6]= "log(TURNOVER)"
colnames(tsla)
colnames(tslaSelected)
sapply(tslaSelected,function(x){length(unique(x))})
head(tslaSelected$EQY_FLOAT)
str(tslaSelected)
str(googSelected)
sapply(googSelected,function(x){length(unique(x))})
str(googSelected)
sapply(googSelected,function(x){length(unique(x))})
anyNA(tslaSelected)
anyNA(googSelected)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_OPEN - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW)
View(tslaReg)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW)
plot(tslaReg$diffHighLow, tslaReg$PX_TO_BOOK_RATIO)
plot(tslaReg$diffLastOpen, tslaReg$PX_TO_BOOK_RATIO)
require(car)
?car::scatterplotMatrix()
car::scatterplotMatrix(tslaReg[,5:13])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100)
car::scatterplotMatrix(tslaReg[,5:8])
car::scatterplotMatrix(tslaReg[,8:9])
car::scatterplotMatrix(tslaSelected[,1:5])
car::scatterplotMatrix(tslaSelected[,1:8])
car::scatterplotMatrix(tslaReg$diffLastOpen,tslaReg$diffHighLow,tslaReg$BID,tslaReg$ASK)
car::scatterplotMatrix(tslaReg[,c(7,8,12,13)])
car::scatterplotMatrix(tslaReg[,c(8,9,12,13,14)])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100
grpwthSq = (PX_LAST - PX_OPEN)**2)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
car::scatterplotMatrix(tslaReg[,c(8,9,12,13,14,15)])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
diffAskBid   = ASK - BID,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
car::scatterplotMatrix(tslaReg[,10:16])
corrplot::corrplot(cor(tslaReg), order="hclust")
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrTsla
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.7, names = TRUE)
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.85, names = TRUE)
highCorrTsla
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrTsla
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
tslaRegFit %>% tslaRegRemoveCorr %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
tslaRegFit %>% tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
tslaRegFit = tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, -1)
library("astsa")
?lag()
require(dplyr)
lag(1:5)
lag(2:6)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, n = -1)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, n = 1)
tslaRegFit = tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, n = 1),
vol2 = dplyr::lag(PX_VOLUME, n = 2),
vol3 = dplyr::lag(PX_VOLUME, n = 3),
vol4 = dplyr::lag(PX_VOLUME, n = 4),
vol5 = dplyr::lag(PX_VOLUME, n = 5),
eqy1 = dplyr::lag(EQY_FLOAT, n = 1),
eqy2 = dplyr::lag(EQY_FLOAT, n = 2),
eqy3 = dplyr::lag(EQY_FLOAT, n = 3),
eqy4 = dplyr::lag(EQY_FLOAT, n = 4),
eqy5 = dplyr::lag(EQY_FLOAT, n = 5),
)
View(tslaRegFit)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
ts.plot(diff(tslaReg$PX_TO_BOOK_RATIO))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)))
ts.plot(diff(log(tslaReg$PX_TO_BOOK_RATIO)))
ts.plot(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
require(astsa)
acf(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
?acf()
ccf(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
ts.plot(diff(diff(log(tslaReg$PX_TO_SALES_RATIO))))
acf(diff(diff(log(tslaReg$PX_TO_SALES_RATIO))))
tslaTsPlot = tslaReg %>%
apply(.,2, function(x) {diff(diff(log(x)))}) %>%
ts.plot
tslaTsPlot = tslaReg %>%
apply(.,2, function(x) {diff(diff(log(x)))}) %>%
apply(.,2,ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf, na.action=NULL)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
anyNA(tslaReg)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))})
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x)))}) %>%
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
?ts.plot()
require(graphics)
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab=expression(paste(colnames(tslaReg)[2])), ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab=expression(colnames(tslaReg)[2]), ylab="deaths", lty=c(1:3)))
colnames(tslaReg)
colnames(tslaReg)[2]
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot(.))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot(.))
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
tslaRegPositive = tslaReg %>%
select(>0)
tslaRegPositive = tslaReg %>%
select(tslaReg > 0)
tslaRegPositive = tslaReg %>%
select(., tslaReg > 0)
minTsla = apply(tslaReg, 2, min)
which(minTsla > 0)
tslaTsPlotPositive = tslaRegPositive %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/5)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/2)))}) %>%
apply(., 2, ts.plot)
tslaReg = tslaSelected %>%
dplyr::select(.,-highCorrTsla)
dplyr::mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
HighLow      = (PX_HIGH - PX_LOW)/PX_LOW*100,
diffAskBid   = ASK - BID,
AskBid       = (ASK - BID)/BID*100,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
tslaReg = tslaSelected %>%
dplyr::mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
HighLow      = (PX_HIGH - PX_LOW)/PX_LOW*100,
diffAskBid   = ASK - BID,
AskBid       = (ASK - BID)/BID*100,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
require(graphics)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/2)))}) %>%
apply(., 2, ts.plot)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
diff(diff(tslaReg$growth**(1/3)))
diff(diff(tslaReg$growth))
round(diff(diff(tslaReg$growth)),4)
round(diff(diff(tslaReg$growth)),4)**(1/3)
diff(diff(tslaReg$growth))[1:5]
diff(diff(tslaReg$growth[1:5]))**(1/3)
diff(diff(tslaReg$growth[1:5]))
diff(diff(tslaReg$growth[1:20]))
test = diff(diff(tslaReg$growth[1:20]))
test**(1/3)
test = diff(diff(tslaReg$growth[1:20]))
test**(2)
cuberoot=function(x){
x=sign(x)*abs(x)^(1/3)
}
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaRegRemoveCorr %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, ts.plot)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
highCorrTsla
corrplot::corrplot(cor(tslaReg), order="hclust")
corrplot::corrplot(cor(tslaSelected), order="hclust")
