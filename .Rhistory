str(googSelected)
sapply(googSelected,function(x){length(unique(x))})
str(googSelected)
sapply(googSelected,function(x){length(unique(x))})
anyNA(tslaSelected)
anyNA(googSelected)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_OPEN - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW)
View(tslaReg)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW)
plot(tslaReg$diffHighLow, tslaReg$PX_TO_BOOK_RATIO)
plot(tslaReg$diffLastOpen, tslaReg$PX_TO_BOOK_RATIO)
require(car)
?car::scatterplotMatrix()
car::scatterplotMatrix(tslaReg[,5:13])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100)
car::scatterplotMatrix(tslaReg[,5:8])
car::scatterplotMatrix(tslaReg[,8:9])
car::scatterplotMatrix(tslaSelected[,1:5])
car::scatterplotMatrix(tslaSelected[,1:8])
car::scatterplotMatrix(tslaReg$diffLastOpen,tslaReg$diffHighLow,tslaReg$BID,tslaReg$ASK)
car::scatterplotMatrix(tslaReg[,c(7,8,12,13)])
car::scatterplotMatrix(tslaReg[,c(8,9,12,13,14)])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100
grpwthSq = (PX_LAST - PX_OPEN)**2)
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
car::scatterplotMatrix(tslaReg[,c(8,9,12,13,14,15)])
tslaReg = tslaSelected %>%
mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
diffAskBid   = ASK - BID,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
car::scatterplotMatrix(tslaReg[,10:16])
corrplot::corrplot(cor(tslaReg), order="hclust")
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrTsla
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.7, names = TRUE)
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.85, names = TRUE)
highCorrTsla
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrTsla
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
tslaRegFit %>% tslaRegRemoveCorr %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
tslaRegFit %>% tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
tslaRegFit = tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, -1),
vol2 = dplyr::lag(PX_VOLUME, -2),
vol3 = dplyr::lag(PX_VOLUME, -3),
vol4 = dplyr::lag(PX_VOLUME, -4),
vol5 = dplyr::lag(PX_VOLUME, -5),
eqy1 = dplyr::lag(EQY_FLOAT, -1),
eqy2 = dplyr::lag(EQY_FLOAT, -2),
eqy3 = dplyr::lag(EQY_FLOAT, -3),
eqy4 = dplyr::lag(EQY_FLOAT, -4),
eqy5 = dplyr::lag(EQY_FLOAT, -5),
)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, -1)
library("astsa")
?lag()
require(dplyr)
lag(1:5)
lag(2:6)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, n = -1)
vol1 = dplyr::lag(tslaReg$PX_VOLUME, n = 1)
tslaRegFit = tslaReg %>%
dplyr::mutate(vol1 = dplyr::lag(PX_VOLUME, n = 1),
vol2 = dplyr::lag(PX_VOLUME, n = 2),
vol3 = dplyr::lag(PX_VOLUME, n = 3),
vol4 = dplyr::lag(PX_VOLUME, n = 4),
vol5 = dplyr::lag(PX_VOLUME, n = 5),
eqy1 = dplyr::lag(EQY_FLOAT, n = 1),
eqy2 = dplyr::lag(EQY_FLOAT, n = 2),
eqy3 = dplyr::lag(EQY_FLOAT, n = 3),
eqy4 = dplyr::lag(EQY_FLOAT, n = 4),
eqy5 = dplyr::lag(EQY_FLOAT, n = 5),
)
View(tslaRegFit)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
ts.plot(diff(tslaReg$PX_TO_BOOK_RATIO))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)))
ts.plot(diff(log(tslaReg$PX_TO_BOOK_RATIO)))
ts.plot(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
require(astsa)
acf(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
?acf()
ccf(diff(diff(log(tslaReg$PX_TO_BOOK_RATIO))))
ts.plot(diff(diff(log(tslaReg$PX_TO_SALES_RATIO))))
acf(diff(diff(log(tslaReg$PX_TO_SALES_RATIO))))
tslaTsPlot = tslaReg %>%
apply(.,2, function(x) {diff(diff(log(x)))}) %>%
ts.plot
tslaTsPlot = tslaReg %>%
apply(.,2, function(x) {diff(diff(log(x)))}) %>%
apply(.,2,ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot) %>%
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf, na.action=NULL)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))}) %>%
apply(., 2, acf)
anyNA(tslaReg)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(log(x)))})
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x)))}) %>%
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
?ts.plot()
require(graphics)
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab="year", ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab=expression(paste(colnames(tslaReg)[2])), ylab="deaths", lty=c(1:3)))
ts.plot(diff(diff(tslaReg$PX_TO_BOOK_RATIO)), gpars=list(xlab=expression(colnames(tslaReg)[2]), ylab="deaths", lty=c(1:3)))
colnames(tslaReg)
colnames(tslaReg)[2]
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot(.))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot(.))
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, acf)
tslaRegPositive = tslaReg %>%
select(>0)
tslaRegPositive = tslaReg %>%
select(tslaReg > 0)
tslaRegPositive = tslaReg %>%
select(., tslaReg > 0)
minTsla = apply(tslaReg, 2, min)
which(minTsla > 0)
tslaTsPlotPositive = tslaRegPositive %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(3)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/5)))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x))}) %>%
apply(., 2, ts.plot)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/2)))}) %>%
apply(., 2, ts.plot)
tslaReg = tslaSelected %>%
dplyr::select(.,-highCorrTsla)
dplyr::mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
HighLow      = (PX_HIGH - PX_LOW)/PX_LOW*100,
diffAskBid   = ASK - BID,
AskBid       = (ASK - BID)/BID*100,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
tslaReg = tslaSelected %>%
dplyr::mutate(diffLastOpen = PX_LAST - PX_OPEN,
diffHighLow  = PX_HIGH - PX_LOW,
HighLow      = (PX_HIGH - PX_LOW)/PX_LOW*100,
diffAskBid   = ASK - BID,
AskBid       = (ASK - BID)/BID*100,
growth = (PX_LAST - PX_OPEN)/PX_OPEN*100,
grpwthSq = (PX_LAST - PX_OPEN)**2)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
corrplot::corrplot(cor(tslaRegRemoveCorr), order="hclust")
require(graphics)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/2)))}) %>%
apply(., 2, ts.plot)
par(mfrow=c(2,2))
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(x**(1/3)))}) %>%
apply(., 2, ts.plot)
diff(diff(tslaReg$growth**(1/3)))
diff(diff(tslaReg$growth))
round(diff(diff(tslaReg$growth)),4)
round(diff(diff(tslaReg$growth)),4)**(1/3)
diff(diff(tslaReg$growth))[1:5]
diff(diff(tslaReg$growth[1:5]))**(1/3)
diff(diff(tslaReg$growth[1:5]))
diff(diff(tslaReg$growth[1:20]))
test = diff(diff(tslaReg$growth[1:20]))
test**(1/3)
test = diff(diff(tslaReg$growth[1:20]))
test**(2)
cuberoot=function(x){
x=sign(x)*abs(x)^(1/3)
}
tslaTsPlot = tslaReg %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, ts.plot)
tslaACF = tslaReg %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, acf)
tslaTsPlot = tslaRegRemoveCorr %>%
apply(., 2, function(x) {diff(diff(cuberoot(x)))}) %>%
apply(., 2, ts.plot)
highCorrTsla = tslaReg %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
tslaRegRemoveCorr = select(tslaReg, - highCorrTsla)
highCorrTsla
corrplot::corrplot(cor(tslaReg), order="hclust")
corrplot::corrplot(cor(tslaSelected), order="hclust")
install.packages("newsanchor")
## Load libraries
library(bit64) # To read raw data
library(caret)
library(corrplot)
library(data.table) # Faster CSV reader than base
library(dplyr)
library(e1071)
library(ggplot2) # General plotting
library(newsanchor) # News API scrape
library(readxl)
library(rtweet) # Twitter scrape
library(rvest)
library(stringr) # Goggle news scrape
library(tau)
library(textdata)
library(plot3D)   #PCs plot
library(RcppRoll) #CMF
library(TTR)      #Calculate Indicators: EMA,SMA,RSI
library(leaps)    #Stepwise Model Selection
library(zoo) # Interpolation
knitr::opts_chunk$set(echo = T)
names(tslaReg)
###TSLA
tslaTemp = tslaSelected %>%
dplyr::mutate(
PP = lag((PX_HIGH + PX_LOW + PX_LAST)/3), #Previous Day (High + Low + Close) / 3
R1 = 2 * PP - lag(PX_LOW),                #(Pivot x 2) – Previous Day Low
S1 = 2 * PP - lag(PX_HIGH),               #(Pivot x 2) – Previous Day High
R2 = PP + (R1 - S1),                      #Pivot + (R1 – S1)
S2 = PP - (R1 - S1),                      #Pivot - (R1 – S1)
R3 = lag(PX_HIGH) + 2 * (PP - lag(PX_LOW)),
#R3= Previous Day High + 2(PP – Previous Day Low)
S3 = lag(PX_LOW) - 2 * (lag(PX_HIGH) - PP),
#S3= Previous Day Low – 2(Previous Day High – Pivot)
diffHighLow  = PX_HIGH - PX_LOW,
diffLastOpen = PX_LAST - PX_OPEN,
stockReturn  = (PX_LAST - PX_OPEN)/PX_OPEN
)
highCorrF = function(dta, thred){
#Find highly correlated features
highCorr = dta %>%
cor %>%
caret::findCorrelation(thred, names = TRUE)
return(highCorr)
}
hclustPlotF = function(dta) {
#Correlation Plot
corrplot::corrplot(cor(dta), order="hclust")
}
###GOOG
tslaLaggedAddOBV = tslaTemp %>%
mutate(obv = TTR::OBV(PX_LAST, PX_VOLUME))
daysCMF = 21
tslalaggedAddCMF = tslaLaggedAddOBV %>%
mutate(cmf = TTR::CMF(tslaLaggedAddOBV[,c("PX_HIGH","PX_LOW","PX_LAST")], PX_VOLUME, n = daysCMF))
daysEMA = 10 #EMA lengths
tslalaggedAddEMA = tslalaggedAddCMF %>%
mutate(ema = TTR::EMA(tslalaggedAddCMF$PX_LAST,daysEMA))
###GOOG
###Tsla
daysRSI = 14
tslalaggedAddRSI = tslalaggedAddEMA %>%
mutate(rsi = TTR::RSI(lag(PX_LAST), n=daysRSI, maType="WMA", wts=lag(PX_VOLUME)))
###GOOG
addLaggedVarF = function(feature, dataForModification, featureName,lagSize ) {
for (lags in 1:lagSize) {
newColName = paste0(featureName, lags)
dataForModification = dataForModification %>%
dplyr::mutate(!!sym(newColName) := dplyr::lag(feature, n = lags))
}
return(dataForModification)
}
#Create lagged features for model fitting (use as an alternative to Time Series Model)
lags10Days = 10
lags21Days = 21
tslaLagged = addLaggedVarF(tslalaggedAddRSI$PX_HIGH, tslalaggedAddRSI, "PX_HIGH",lags)
addLaggedVarF = function(feature, dataForModification, featureName,lagSize ) {
for (lags in 1:lagSize) {
newColName = paste0(featureName, lags)
dataForModification = dataForModification %>%
dplyr::mutate(!!sym(newColName) := dplyr::lag(feature, n = lags))
}
return(dataForModification)
}
tslaLagged = addLaggedVarF(tslalaggedAddRSI$PX_HIGH, tslalaggedAddRSI, "PX_HIGH",lags)
tslaLagged = addLaggedVarF(tslalaggedAddRSI$PX_HIGH, tslalaggedAddRSI, "PX_HIGH",lags)
tslaLagged = addLaggedVarF(tslalaggedAddRSI$PX_HIGH, tslalaggedAddRSI, "PX_HIGH",lags10Days)
for (j in 2:ncol(tslalaggedAddRSI)) {
tslaLagged = addLaggedVarF(tslalaggedAddRSI[,j], tslaLagged, names(tslalaggedAddRSI)[j],lags10Days)
}
addDiffVarF = function(dataForModification,nColumn) {
#"tslaSelected" is created to remove features with too many missing values from the original data
#Purpose: Take the first difference of features in "tslaSelected"
diffFeature = as_tibble(matrix(rep(0,((nrow(dataForModification)-1)*nColumn)),ncol = nColumn))
featureName = names(dataForModification)[1:nColumn]
for (j in 1:nColumn) {
diffFeature[,j] = as_tibble(matrix(diff(dataForModification[,j]), ncol = 1))
names(diffFeature)[j] = paste0(featureName[j],"_diff")
}
dataForModification_ = dataForModification[2:nrow(dataForModification),]
laggedDiff = cbind(dataForModification_,diffFeature)
return(laggedDiff)
}
tslaLaggedDiff =  addDiffVarF(tslaLagged,ncol(tslaSelected))
View(tslaLaggedDiff)
lag(1:10,1)
addDiffVarF = function(dataForModification,nColumn) {
#"tslaSelected" is created to remove features with too many missing values from the original data
#Purpose: Take the first difference of features in "tslaSelected"
diffFeature = as_tibble(matrix(rep(0,((nrow(dataForModification)-1)*nColumn)),ncol = nColumn))
featureName = names(dataForModification)[1:nColumn]
for (j in 1:nColumn) {
diffFeature[,j] = as_tibble(matrix(diff(dataForModification[,j]), ncol = 1))
names(diffFeature)[j] = paste0(featureName[j],"_diffPreviousDay")
}
diffFeature = lag(diffFeature) #Use the difference between today and yesterday to predict tomorrow
dataForModification_ = dataForModification[2:nrow(dataForModification),]
laggedDiff = cbind(dataForModification_,diffFeature)
laggedDiff %>% transmute()
return(laggedDiff)
}
tslaLaggedDiff =  addDiffVarF(tslaLagged,ncol(tslaSelected))
tslaReg = tslaLaggedDiff %>%
select(-names(tslaLaggedDiff)[1:20]) %>%
#Our goal is to predict tomorrow's stock trend by using data collected by today or/and in the past. So the supervisor(stockReturnDummy) should lead all features at least one day.
#For instance, instead of using "PX_HIGH" to predict "stockReturnDummy", we should use "PX_HIGH1".
na.omit()
tslaRegX = tslaReg %>% select(-stockReturn)
(tslaRegTrans = caret::preProcess(tslaRegX, method = c("BoxCox","center","scale","pca")))
#Apply the transformations("BoxCox","center","scale","pca")
tslaRegPCA = stats::predict(tslaRegTrans,tslaRegX) #Outputs are PCA components
utils::head(tslaRegPCA)
#Summary of PCA results
tslaRegTrans_     = caret::preProcess(tslaRegX, method = c("BoxCox","center","scale"))
propVarTslaRegPCA = tslaRegX %>%
stats::predict(tslaRegTrans_,.) %>%
stats::prcomp() %>%
summary()
propVarTslaRegPCA #proportion of variance explained by each PCs
#Check extreme observations via PCA
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC3, y= PC2),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC1, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC2, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
plot3D::scatter3D(tslaRegPCA$PC1, tslaRegPCA$PC2, tslaReg$stockReturn, pch = 16,
theta = 20, phi = 20, main = "StockReturn vs PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed",color = ifelse(tslaReg$stockReturn < 0,'red','green'))
plot3D::scatter3D(tslaRegPCA$PC1, tslaRegPCA$PC2, tslaReg$stockReturn, pch = 16,
theta = 20, phi = 20, main = "Stock Return vs PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "Stock Return", bty = "g", ticktype = "detailed",color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC2, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC2, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC1, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = tslaRegPCA)+
geom_point(aes(x = PC3, y= tslaReg$stockReturn),color = ifelse(tslaReg$stockReturn < 0,'red','green'))
tslaRegY = tslaReg %>%
mutate(stockReturnDummy = factor(ifelse(stockReturn > 0, "Increased", "Decreased"))) %>%
select(stockReturnDummy)
View(tslaRegY)
tslaRegY = tslaReg %>%
mutate(stockReturnDummy = factor(ifelse(stockReturn > 0, "Increased", "Decreased"))) %>%
select(stockReturnDummy)
tslaDummyModel = caret::dummyVars(~ ., data = tslaRegY, fullRank = TRUE)
tslaRegYDummy = as_tibble(predict(tslaDummyModel, tslaRegY))
View(tslaRegYDummy)
tslaRegX = tslaReg %>% select(-stockReturn)
(tslaRegTrans = caret::preProcess(tslaRegX, method = c("BoxCox","center","scale","pca")))
#Apply the transformations("BoxCox","center","scale","pca")
tslaRegPCA = stats::predict(tslaRegTrans,tslaRegX) #Outputs are PCA components
utils::head(tslaRegPCA)
tslaDummyModel = caret::dummyVars(~ ., data = tslaRegY, fullRank = TRUE)
tslaRegYDummy = as_tibble(predict(tslaDummyModel, tslaRegY))
#Use PCs to fit logistic model
trControl = trainControl(method = 'none')
tslaRegMainPCs = tslaRegPCA %>% select(PC1, PC2, PC3)
tslaOutLogistic = train(x = tslaRegMainPCs, y = tslaRegYDummy, method = 'glm', trControl = trControl)
View(tslaRegPCA)
View(tslaRegMainPCs)
tslaRegYDummy = as_tibble(predict(tslaDummyModel, tslaRegY))
trControl = trainControl(method = 'none')
tslaRegMainPCs = tslaRegPCA %>% select(PC1, PC2, PC3)
tslaOutLogistic = train(x = tslaRegMainPCs, y = tslaRegYDummy, method = 'glm', trControl = trControl)
tslaOutLogistic = train(x = tslaRegMainPCs, y = stockReturnDummy, method = 'glm', trControl = trControl)
tslaOutLogistic = train(x = tslaRegMainPCs, y = tslaRegY, method = 'glm', trControl = trControl)
save.image("D:/Mia/STAT/656/self-project/backup/working environment - backup10.RData")
