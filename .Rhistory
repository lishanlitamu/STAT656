)
kurtosisGoog = kurtosisGoog %>%
as.data.frame() %>%
tibble::rownames_to_column(., "features")
knitr::kable(
kurtosisGoog,
col.names = c("Features","Kurtosis"),
caption   = "Table 2-6: Kurtosis of Selected Features - Google",
align     = "lccrr"
)
(googTrans = caret::preProcess(googSelected, method = c("BoxCox","center","scale","pca")))
googPCA = stats::predict(googTrans,googSelected) #Outputs are PCA components
utils::head(googPCA)
(googTrans_    = caret::preProcess(googSelected, method = c("BoxCox","center","scale")))
propVarGoogPCA = googSelected %>%
stats::predict(googTrans_,.) %>%
stats::prcomp() %>%
summary()
propVarGoogPCA #proportion of variance explained by each PCs
ggplot(data = googPCA)+
geom_point(aes(x = PC1, y= PC2))
ggplot(data = googPCA)+
geom_point(aes(x = PC3, y= PC2))
ggplot(data = googPCA)+
geom_point(aes(x = PC1, y= PC3))
plot3D::scatter3D(googPCA$PC1, googPCA$PC2, googPCA$PC3, pch = 16,
theta = 20, phi = 20, main = "PCA - Alphabet", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed")
transGoog = predict(googTrans_,googSelected)
par(mfrow=c(2,2))
for (i in 1:ncol(googSelected)) {
hist(googSelected[,i], breaks=20, freq=FALSE,
main = paste("Density Plot - ",names(googSelected)[i], "(After)"),
xlab = " ")
hist(transGoog[,i], breaks=20, freq=FALSE,
main = paste("Density Plot - ",names(transGoog)[i], "(Before)"),
xlab = " ")
}
library(corrplot)
corrTsla     = stats::cor(tslaSelected)
corrplot::corrplot(corrTsla, order="hclust")
#library(corrplot)
corrGoog     = stats::cor(googSelected)
corrplot::corrplot(corrGoog, order="hclust")
#Tsla
#str(tslaSelected)
sapply(tslaSelected,function(x){length(unique(x))})
#Goog
#str(googSelected)
sapply(googSelected,function(x){length(unique(x))})
#Tsla
#str(tslaSelected)
sapply(tsla,function(x){length(unique(x))})
summary(tsla)
#Goog
#str(googSelected)
sapply(goog,function(x){length(unique(x))})
summary(tslaSelected)
#Tsla
#str(tslaSelected)
sapply(tsla,function(x){length(unique(x))})
#summary(tsla)
#Goog
#str(googSelected)
sapply(goog,function(x){length(unique(x))})
#summary(tslaSelected)
#Recall highly correlated variables before making changes
highCorrTsla = tslaSelected %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrTsla
corrplot::corrplot(cor(tslaSelected), order="hclust")
highCorrGoog = googSelected %>%
cor %>%
caret::findCorrelation(.8, names = TRUE)
highCorrGoog
corrplot::corrplot(cor(googSelected), order="hclust")
###TSLA
tslaTemp = tslaSelected %>%
dplyr::mutate(
PP = lag((PX_HIGH + PX_LOW + PX_LAST)/3), #Previous Day (High + Low + Close) / 3
R1 = 2 * PP - lag(PX_LOW),                #(Pivot x 2) – Previous Day Low
S1 = 2 * PP - lag(PX_HIGH),               #(Pivot x 2) – Previous Day High
R2 = PP + (R1 - S1),                      #Pivot + (R1 – S1)
S2 = PP - (R1 - S1),                      #Pivot - (R1 – S1)
R3 = lag(PX_HIGH) + 2 * (PP - lag(PX_LOW)),
#R3= Previous Day High + 2(PP – Previous Day Low)
S3 = lag(PX_LOW) - 2 * (lag(PX_HIGH) - PP),
#S3= Previous Day Low – 2(Previous Day High – Pivot)
diffHighLow  = PX_HIGH - PX_LOW,
diffLastOpen = PX_LAST - PX_OPEN,
stockReturn  = (PX_LAST - PX_OPEN)/PX_OPEN
)
highCorrF = function(dta, thred){
#Find highly correlated features
highCorr = dta %>%
cor %>%
caret::findCorrelation(thred, names = TRUE)
return(highCorr)
}
hclustPlotF = function(dta) {
#Correlation Plot
corrplot::corrplot(cor(dta), order="hclust")
}
###GOOG
tslaAddOBV = tslaTemp %>%
mutate(obv = TTR::OBV(PX_LAST, PX_VOLUME))
#TSLA
daysCMF = 21
tslaAddCMF = tslaAddOBV %>%
mutate(cmf = TTR::CMF(tslaAddOBV[,c("PX_HIGH","PX_LOW","PX_LAST")], PX_VOLUME, n = daysCMF))
#GOOG
#TSLA
daysEMA = 10 #EMA lengths
tslaAddEMA = tslaAddCMF %>%
mutate(emaPrice = TTR::EMA(tslaAddCMF$PX_LAST,daysEMA)) %>%
mutate(emaVolume = TTR::EMA(tslaAddCMF$PX_VOLUME,daysEMA))
###GOOG
###Tsla
daysRSI = 14
tslaAddRSI = tslaAddEMA %>%
mutate(rsi = TTR::RSI(PX_LAST, n=daysRSI, maType="WMA", wts=PX_VOLUME))
###GOOG
###Tsla
daysSMA = 10
tslaAddSMA = tslaAddRSI %>%
mutate(smaPrice = TTR::SMA(PX_LAST, n=daysSMA)) %>%
mutate(smaVolume = TTR::SMA(PX_VOLUME, n=daysSMA))
###GOOG
###Tsla
#Stochastic Momentum Index
daysK = 5 #%K is usually set to 5 and represents the main movements of price – slow line.
daysD = 3 #%D is the fast line, a simple moving average of the %K and is set to 3.
tslaHLC  = tslaSelected %>% dplyr::select(PX_HIGH, PX_LOW, PX_LAST)
tslaAddK = tslaAddSMA %>%
dplyr::mutate(smi_K = (stoch(tslaHLC, nFastK = daysK, nFastD = daysD, nSlowD = 3, bounded = TRUE,smooth = 1))[,1]) %>% #calculate fastK%
dplyr::mutate(smi_D = (stoch(tslaHLC, nFastK = daysK, nFastD = daysD, nSlowD = 3, bounded = TRUE,smooth = 1))[,2])  #calculate fastD%
#bounded:Logical, should current period’s values be used in the calculation? Set it as TRUE here. We will align Y's with past X's in Section xxx.
#Reference:https://library.tradingtechnologies.com/trade/chrt-ti-stochastic-momentum-index.html
###GOOG
tslaFull = tslaAddK %>%
na.omit()
tslaY    = dplyr::as_tibble(tslaFull$stockReturn[2:nrow(tslaFull)])
tslaX    = tslaFull %>%
dplyr::select(-stockReturn) %>%
.[1:(nrow(tslaFull)-1),] %>%
dplyr::as_tibble(.)
#We have to make an assumption here as our data are time-sensitive:
#All the features in original data are collected after the stock market closure, which means we can only use data happened(or collected) in today and/or before today to predict tomorrow. Thus, we align Y with lag(x, nlags=1).
(tslaXTrans = caret::preProcess(tslaX, method = c("BoxCox","center","scale","pca")))
(tslaXTrans = caret::preProcess(tslaX$PX_HIGH, method = c("BoxCox","center","scale","pca")))
tslaX_DataFrame = as.data.frame(tslaX)
(tslaXTrans = caret::preProcess(tslaX_DataFrame, method = c("BoxCox","center","scale","pca")))
(tslaXTrans = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale","pca")))
pcaTslaX = stats::predict(tslaXTrans,tslaX) #Outputs are PCA components
pcaTslaX = stats::predict(tslaXTrans,s.data.frame(tslaX)) #Outputs are PCA components
pcaTslaX = stats::predict(tslaXTrans,as.data.frame(tslaX)) #Outputs are PCA components
head(pcaTslaX)
tslaXTrans_     = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale"))
propVarpcaTslaX = as.data.frame(tslaX) %>%
stats::predict(tslaXTrans_,.) %>%
stats::prcomp() %>%
summary()
propVar_pcaTslaX
propVar_pcaTslaX = as.data.frame(tslaX) %>%
stats::predict(tslaXTrans_,.) %>%
stats::prcomp() %>%
summary()
propVar_pcaTslaX
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaY < 0,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaY < 0,'red','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y= PC2),color = ifelse(tslaY < 0,'green','red'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < 0,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y= PC2),color = ifelse(tslaY < 0,'green','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < 0,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < mean(tslaY),'red','green'))
mean(tslaY)
colmean(as.data.frame(tslaY))
summary(tslaY)
summary(tslaY)[3]
summary(tslaY)[3][2]
summary(tslaY)[1,3]
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < 0.0003411 ,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < -0.0142714 ,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY > 0.0145315 ,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaY < 0.0145315,'red','blue'))
View(tslaY)
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaY < 0,'red','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y= PC2),color = ifelse(tslaY < 0,'red','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < 0,'red','blue'))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, pcaTslaX$PC3, pch = 16,
theta = 20, phi = 20, main = "PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed",color = ifelse(tslaReg$stockReturn < 0,'red','blue'))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, pcaTslaX$PC3, pch = 16,
theta = 20, phi = 20, main = "PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed")
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, pcaTslaX$PC3, pch = 16,
theta = 20, phi = 20, main = "PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed")
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= tslaY),color = ifelse(tslaY < 0,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=as.data.frame(tslaY),color = ifelse(tslaY < 0,'red','green')))
ggplot(data = as.data.frame(pcaTslaX))+
geom_point(aes(x = PC1, y=as.data.frame(tslaY),color = ifelse(tslaY < 0,'red','green')))
ggplot(data = (pcaTslaX))+
geom_point(aes(x = pcaTslaX$PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
tslaY_DataFrame = as.data.frame(tslaY)
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY_DataFrame),color = ifelse(tslaY_DataFrame < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaFull$stockReturn),color = ifelse(tslaY_DataFrame < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = pcaTslaX$PC1, y=(tslaFull$stockReturn),color = ifelse(tslaFull$stockReturn < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = pcaTslaX$PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = unlist(PC1), y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
unlist(pcaTslaX)
ggplot(data = pcaTslaX)+
geom_point(aes(x = unlist(pcaTslaX$PC1), y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
pcaTslaX$PC1 = unlist(pcaTslaX$PC1)
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
pcaTslaX %>% as_tibble(.)
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
View(pcaTslaX)
typeof(pcaTslaX)
typeof(tslaRegPCA)
#Transform the selected data
(tslaXTrans = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale","pca")))
#Apply the transformations("BoxCox","center","scale","pca")
pcaTslaX = stats::predict(tslaXTrans,as.data.frame(tslaX)) #Outputs are PCA components
head(pcaTslaX)
#Summary of PCA results
tslaXTrans_     = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale"))
propVar_pcaTslaX = as.data.frame(tslaX) %>%
stats::predict(tslaXTrans_,.) %>%
stats::prcomp() %>%
summary()
propVar_pcaTslaX #proportion of variance explained by each PCs
#Check extreme observations via PCA
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2),color = ifelse(tslaY < 0,'red','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y= PC2),color = ifelse(tslaY < 0,'red','blue'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3),color = ifelse(tslaY < 0,'red','blue'))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, pcaTslaX$PC3, pch = 16,
theta = 20, phi = 20, main = "PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "PC3", bty = "g", ticktype = "detailed")
#Stock Return vs PCs
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY),color = ifelse(tslaY < 0,'red','green')))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=(tslaY))
ggplot(data = pcaTslaX)+
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, tslaY, pch = 16,
theta = 20, phi = 20, main = "Stock Return vs PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "Stock Return", bty = "g", ticktype = "detailed",color = ifelse(tslaReg$stockReturn < 0,'red','green'))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, tslaY$value, pch = 16,
theta = 20, phi = 20, main = "Stock Return vs PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "Stock Return", bty = "g", ticktype = "detailed",color = ifelse(tslaReg$stockReturn < 0,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$value),color = ifelse(tslaY$value < 0,'red','green'))
summary(tslaY)
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$value),color = ifelse(tslaY$value < -0.0142714  ,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$value),color = ifelse(tslaY$value < 0  ,'red','green'))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC2, y=tslaY$value),color = ifelse(tslaY$value < 0  ,'red','green'))
plot3D::scatter3D(pcaTslaX$PC1, pcaTslaX$PC2, tslaY$value, pch = 16,
theta = 20, phi = 20, main = "Stock Return vs PCA - Tesla", xlab = "PC1",
ylab ="PC2", zlab = "Stock Return", bty = "g", ticktype = "detailed")
pcaTslaFit = lm(tslaY$value ~ pcaTslaX)
cor(cbind(tslaY,pcaTslaX))
hclustPlotF(cbind(tslaY,pcaTslaX))
XtslaAddLevels = tslaX %>%
mutate(aboveR1 = factor(ifelse(PX_HIGH > R1, "Yes", "No"))) %>%
mutate(aboveR2 = factor(ifelse(PX_HIGH > R2, "Yes", "No"))) %>%
mutate(aboveR3 = factor(ifelse(PX_HIGH > R3, "Yes", "No"))) %>%
mutate(belowS1 = factor(ifelse(PX_LOW  < S1, "Yes", "No"))) %>%
mutate(belowS2 = factor(ifelse(PX_LOW  < S2, "Yes", "No"))) %>%
mutate(belowS3 = factor(ifelse(PX_LOW  < S3, "Yes", "No"))) %>%
select(aboveR1, aboveR2, aboveR3, belowS1, belowS2, belowS3)
View(XtslaAddLevels)
names(tslaY$value) = "stockReturn"
names(tslaY)[1] = "stockReturn"
tslaY    = dplyr::as_tibble(tslaFull$stockReturn[2:nrow(tslaFull)]) %>% names(.)[1] = "stockReturn"
YtslaAddLevels =  tslaY %>% mutate(stockReturnDummy = factor(ifelse(stockReturn > 0, "Increased", "Decreased")))
View(YtslaAddLevels)
XtslaDummyModel = caret::dummyVars(~ ., data = XtslaAddLevels, fullRank = TRUE)
YtslaDummyModel = caret::dummyVars(~ ., data = YtslaAddLevels, fullRank = TRUE)
XtslaDummy = as_tibble(predict(XtslaDummyModel, XtslaAddLevels))
View(XtslaDummy)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels)
View(YtslaDummyModel)
View(YtslaDummyModel)
YtslaDummyModel = caret::dummyVars(~ ., data = YtslaAddLevels, fullRank = TRUE)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels))
View(YtslaDummy)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels$stockReturnDummy))
View(YtslaAddLevels)
YtslaDummyModel = caret::dummyVars(~ ., data = YtslaAddLevels$stockReturnDummy, fullRank = TRUE)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels$stockReturnDummy))
YtslaDummy =  factor(ifelse(tslaY$stockReturn > 0, 1, 0))
YtslaAddLevels =  factor(ifelse(tslaY$stockReturn > 0, 1, 0))
YtslaDummyModel = caret::dummyVars(~ ., data = YtslaAddLevels, fullRank = TRUE)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels))
YtslaAddLevels =  factor(ifelse(tslaY$stockReturn > 0, "Increased", "Decreased"))
YtslaAddLevels =  as_tibble(factor(ifelse(tslaY$stockReturn > 0, "Increased", "Decreased")))
YtslaDummyModel = caret::dummyVars(~ ., data = YtslaAddLevels, fullRank = TRUE)
YtslaDummy = as_tibble(predict(YtslaDummyModel, YtslaAddLevels))
View(YtslaDummy)
XtslaLogReg = tslaX %>%
mutate(XtslaDummy)
names(tslaX)
XtslaLogReg = tslaX %>%
mutate(XtslaDummy) %>%
dplyr::select(-c("R1","S1","R2","S2","R3","S3" )) %>% #Drop PP, R1, R2, R3, S1, S2, S3
na.omit()
XtslaLogReg = tslaX %>%
mutate(XtslaDummy) %>%
dplyr::select(-"R1",-"S1",-"R2",-"S2",-"R3",-"S3" )#Drop PP, R1, R2, R3, S1, S2, S3
XtslaLogReg = tslaX %>%
mutate(XtslaDummy) %>%
dplyr::select(-R1,-S1,-R2,-S2,-R3,-S3)
XtslaLogReg = tslaX %>%
mutate(XtslaDummy) %>%
dplyr::select(-R1)
XtslaLogReg = tslaX %>%
mutate(XtslaDummy) %>%
dplyr::select(-R1,-S1,-R2,-S2,-R3,-S3)
highCorrTsla = highCorrF(XtslaLogReg,0.8)
highCorrTsla
hclustPlotF(XtslaLogReg)
highCorrTsla = highCorrF(XtslaLogReg,0.8)
hclustPlotF(XtslaLogReg)
tslaLogRegRemoveCorr = select(XtslaLogReg, -highCorrTsla)
hclustPlotF(tslaLogRegRemoveCorr)
trControl = trainControl(method = 'none')
tslaOutLogistic = train(x = XtslaLogReg, y = YtslaDummy, method = 'glm', trControl = trControl)
View(tslaRegYDummy)
tslaOutLogistic = train(x = XtslaLogReg, y = YtslaDummy$value.Increased, method = 'glm', trControl = trControl)
tslaOutLogistic = train(x = XtslaLogReg, y = factor(YtslaDummy), method = 'glm', trControl = trControl)
tslaOutLogistic = train(x = XtslaLogReg, y = factor(YtslaDummy$value.Increased), method = 'glm', trControl = trControl)
summary(tslaOutLogistic)
tslaOutLogistic = train(x = tslaLogRegRemoveCorr, y = factor(YtslaDummy$value.Increased), method = 'glm', trControl = trControl)
summary(tslaOutLogistic)
tslaOutForward = leaps::regsubsets(x =tslaLogRegRemoveCorr, y = factor(YtslaDummy$value.Increased), nvmax=ncol(XtslaFull), method='forward')
tslaOutForward = leaps::regsubsets(x =tslaLogRegRemoveCorr, y = factor(YtslaDummy$value.Increased), nvmax=ncol(tslaLogRegRemoveCorr), method='forward')
tslaSumForward      = summary(tslaOutForward)
tslamodelForward    = tslaSumForward$which[which.min(tslaSumForward$bic),]
(tslaSelectedForward = tslamodelForward[-1])
YtslaAddLevels =  factor(ifelse(tslaY$stockReturn > 0, "Increased", "Decreased"))
YtslaDummy = factor(ifelse(tslaY$stockReturn > 0, "Increased", "Decreased"))
trControl = trainControl(method = 'none')
tslaOutLogistic = train(x = XtslaLogReg, y = YtslaDummy, method = 'glm', trControl = trControl)
summary(tslaOutLogistic)
View(XtslaLogReg)
summary(XtslaLogReg)
tslaOutLogistic = train(x = XtslaLogReg, y = YtslaDummy, method = 'glm', trControl = trControl)
hclustPlotF(cbind(YtslaDummy,XtslaLogReg))
hclustPlotF(cbind(Ytsla,XtslaLogReg))
hclustPlotF(cbind(tslaY,XtslaLogReg))
save.image("D:/Mia/STAT/656/self-project/backup/working environment - backup11.RData")
load("D:/Mia/STAT/656/self-project/backup/working environment - backup12.RData")
## Load libraries
library(bit64) # To read raw data
library(caret)
library(corrplot)
library(data.table) # Faster CSV reader than base
library(dplyr)
library(e1071)
library(ggplot2) # General plotting
library(newsanchor) # News API scrape
library(readxl)
library(rtweet) # Twitter scrape
library(rvest)
library(stringr) # Goggle news scrape
library(tau)
library(textdata)
library(plot3D)   #PCs plot
library(RcppRoll) #CMF
library(TTR)      #Calculate Indicators: EMA,SMA,RSI
library(leaps)    #Stepwise Model Selection
library(zoo) # Interpolation
knitr::opts_chunk$set(echo = T)
tslaY  = tslaAddCCI %>%
na.omit() %>%
dplyr::select(diffHighLow, stockReturn) %>%
dplyr::as_tibble(.[2:nrow(tslaAddCCIRemoveNA)])
tslaY  = tslaAddCCI %>%
na.omit() %>%
dplyr::select(diffHighLow, stockReturn) %>%
dplyr::as_tibble(.[2:nrow(tslaAddCCIRemoveNA),])
tslaY  = tslaAddCCI %>%
na.omit() %>%
dplyr::select(diffHighLow, stockReturn)
View(tslaY)
View(tslaAddCCI)
View(tslaAddCCIRemoveNA)
tslaY  = tslaAddCCI %>%
na.omit() %>%
dplyr::select(diffHighLow, stockReturn) %>%
dplyr::as_tibble()
tslaY  = tslaAddCCI %>%
na.omit() %>%
dplyr::select(diffHighLow, stockReturn) %>%
dplyr::as_tibble() %>%
dplyr::slice(-1)
View(tslaX)
tslaX    = tslaAddCCI %>%
na.omit() %>%
.[1:(nrow(tslaAddCCIRemoveNA)-1),] %>%
dplyr::as_tibble(.)
tslaFull = as_tibble(cbind(tslaY,tslaX))
names(tslaY)[1] = "diffHighLowTomorrow"
names(tslaY)[2] = "stockReturnTomorrow"
tslaFull = as_tibble(cbind(tslaY,tslaX))
View(tslaFull)
summary(tslaY$diffHighLowTomorrow)
(tslaXTrans = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale","pca")))
pcaTslaX = stats::predict(tslaXTrans,as.data.frame(tslaX)) #Outputs are PCA components
#head(pcaTslaX)
tslaXTrans_     = caret::preProcess(as.data.frame(tslaX), method = c("BoxCox","center","scale"))
propVar_pcaTslaX = as.data.frame(tslaX) %>%
stats::predict(tslaXTrans_,.) %>%
stats::prcomp() %>%
summary()
propVar_pcaTslaX
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC2))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y= PC2))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y= PC3))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$value))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$diffHighLowTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC2, y=tslaY$diffHighLowTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y=tslaY$diffHighLowTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$stockReturnTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC2, y=tslaY$stockReturnTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y=tslaY$stockReturnTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC1, y=tslaY$diffHighLowTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC2, y=tslaY$diffHighLowTomorrow))
ggplot(data = pcaTslaX)+
geom_point(aes(x = PC3, y=tslaY$diffHighLowTomorrow))
tslaAddLevels = tslaFull %>%
mutate(aboveR1 = factor(ifelse(PX_HIGH > R1, "Yes", "No"))) %>%
mutate(aboveR2 = factor(ifelse(PX_HIGH > R2, "Yes", "No"))) %>%
mutate(aboveR3 = factor(ifelse(PX_HIGH > R3, "Yes", "No"))) %>%
mutate(belowS1 = factor(ifelse(PX_LOW  < S1, "Yes", "No"))) %>%
mutate(belowS2 = factor(ifelse(PX_LOW  < S2, "Yes", "No"))) %>%
mutate(belowS3 = factor(ifelse(PX_LOW  < S3, "Yes", "No"))) %>%
select(aboveR1, aboveR2, aboveR3, belowS1, belowS2, belowS3)
XtslaAddLevels = tslaFull %>%
mutate(aboveR1 = factor(ifelse(PX_HIGH > R1, "Yes", "No"))) %>%
mutate(aboveR2 = factor(ifelse(PX_HIGH > R2, "Yes", "No"))) %>%
mutate(aboveR3 = factor(ifelse(PX_HIGH > R3, "Yes", "No"))) %>%
mutate(belowS1 = factor(ifelse(PX_LOW  < S1, "Yes", "No"))) %>%
mutate(belowS2 = factor(ifelse(PX_LOW  < S2, "Yes", "No"))) %>%
mutate(belowS3 = factor(ifelse(PX_LOW  < S3, "Yes", "No"))) %>%
select(aboveR1, aboveR2, aboveR3, belowS1, belowS2, belowS3)
XtslaDummyModel = caret::dummyVars(~ ., data = XtslaAddLevels, fullRank = TRUE)
XtslaAddLevels = tslaFull %>%
mutate(aboveR1 = factor(ifelse(PX_HIGH > R1, "Yes", "No"))) %>%
mutate(aboveR2 = factor(ifelse(PX_HIGH > R2, "Yes", "No"))) %>%
mutate(aboveR3 = factor(ifelse(PX_HIGH > R3, "Yes", "No"))) %>%
mutate(belowS1 = factor(ifelse(PX_LOW  < S1, "Yes", "No"))) %>%
mutate(belowS2 = factor(ifelse(PX_LOW  < S2, "Yes", "No"))) %>%
mutate(belowS3 = factor(ifelse(PX_LOW  < S3, "Yes", "No"))) %>%
select(aboveR1, aboveR2, aboveR3, belowS1, belowS2, belowS3)
XtslaAddLevels = tslaFull %>%
mutate(aboveR1 = factor(ifelse(PX_HIGH > R1, "Yes", "No"))) %>%
mutate(aboveR2 = factor(ifelse(PX_HIGH > R2, "Yes", "No"))) %>%
mutate(aboveR3 = factor(ifelse(PX_HIGH > R3, "Yes", "No"))) %>%
mutate(belowS1 = factor(ifelse(PX_LOW  < S1, "Yes", "No"))) %>%
mutate(belowS2 = factor(ifelse(PX_LOW  < S2, "Yes", "No"))) %>%
mutate(belowS3 = factor(ifelse(PX_LOW  < S3, "Yes", "No"))) %>%
select(aboveR1, aboveR2, aboveR3, belowS1, belowS2, belowS3)
XtslaDummyModel = caret::dummyVars(~ ., data = XtslaAddLevels, fullRank = TRUE)
View(XtslaDummy)
